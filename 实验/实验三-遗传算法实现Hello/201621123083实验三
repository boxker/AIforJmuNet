import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import time

from random import (choice, random, randint)

__all__ = ['Chromosome', 'Population']

class Chromosome:
    _target_gene = "Hello, 201621123083"
    def __init__(self, gene):
        self.gene = gene
        self.fitness = Chromosome._update_fitness(gene)
    
    def mate(self, mate):
        pivot = randint(0, len(self.gene) - 1)
        gene1 = self.gene[:pivot] + mate.gene[pivot:]
        gene2 = mate.gene[:pivot] + self.gene[pivot:]        
        return Chromosome(gene1), Chromosome(gene2)
    
    def mutate(self):
        gene = list(self.gene)
        delta = randint(44, 122)
        idx = randint(0, len(gene) - 1)
        gene[idx] = chr((ord(gene[idx]) + delta) % 123)
        
        return Chromosome(''.join(gene))

    @staticmethod            
    def _update_fitness(gene):
        fitness = 0
        for a, b in zip(gene, Chromosome._target_gene):
            fitness += abs(ord(a) - ord(b))          
        return fitness
        
    @staticmethod
    def gen_random():
        gene = []
        for x in range(len(Chromosome._target_gene)):
            gene.append(chr(randint(44, 122)))
                
        return Chromosome(''.join(gene))
        
class Population:
    _tournamentSize = 3
    def __init__(self, size=1024, crossover=0.8, elitism=0.1, mutation=0.3):
        self.elitism = elitism
        self.mutation = mutation
        self.crossover = crossover
        buf = []
        for i in range(size): buf.append(Chromosome.gen_random())
        self.population = list(sorted(buf, key=lambda x: x.fitness))
                        
    def _tournament_selection(self):
        best = choice(self.population)
        for i in range(Population._tournamentSize):
            cont = choice(self.population)
            if (cont.fitness < best.fitness): best = cont
                    
        return best

    def _selectParents(self):                 
        return (self._tournament_selection(), self._tournament_selection())
        
    def evolve(self):
        size = len(self.population)
        idx = int(round(size * self.elitism))
        buf = self.population[:idx]
        
        while (idx < size):
            if random() <= self.crossover:
                (p1, p2) = self._selectParents()
                children = p1.mate(p2)
                for c in children:
                    if random() <= self.mutation:
                        buf.append(c.mutate())
                    else:
                        buf.append(c)
                idx += 2
            else:
                if random() <= self.mutation:
                    buf.append(self.population[idx].mutate())
                else:
                    buf.append(self.population[idx])
                idx += 1
        
        self.population = list(sorted(buf[:size], key=lambda x: x.fitness))

if __name__ == "__main__":
	maxGenerations = 2000
	t1 = time.time()
	pop = Population(size=2000, crossover=0.7, elitism=0.05, mutation=0.9)
	li = []
	x = []
	for i in range(1, maxGenerations + 1):
		print("Generation %d  Fitness:%d  Result:%s" % (i, Chromosome._update_fitness(pop.population[0].gene),pop.population[0].gene) )
		if pop.population[0].fitness == 0: break
		else:pop.evolve()
		li.append(Chromosome._update_fitness(pop.population[0].gene))
		xx = 0
		for p in range(pop.population.__len__()):
			xx += Chromosome._update_fitness(pop.population[p].gene)
		xx = xx / pop.population.__len__()
		x.append(xx)
	x.sort()
	print(x[0])
	print("Maximum generations reached without success.")
	t2 = time.time()
	t = int(t2 - t1)
	print(f'+ å…±ç”¨æ—¶ï¼š {t} s')
	plt.figure(1)
	plt.subplot(111)
	x = range(i-1)
	y = li[:]
	plt.plot(x,y)
	plt.xlabel("generation",fontsize=12)
	plt.ylabel("fitness",fontsize=12)
	plt.show()
